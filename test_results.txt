PASS js/tests/cpu.test.js
  √ Memory is after instantiation 64kb (3 ms)
  √ Memory at 0xFF == 0x69 after storing value (2 ms)
  √ Return $80, $0F as little endian word ($0F80) (2 ms)
  √ Program loaded into memory at the correct address (1 ms)
  √ Incrementing 8bit registers from 0xFF == 0x00 (1 ms)
  √ Incrementing 16bit registers from 0xFF == 0x100
  √ N flag is set when value >= 128 (11 ms)
  √ N flag is not set when value < 128 (6 ms)
  √ V flag is set for $F0 + $20 (1 ms)
  √ V flag is not set for $F0 + $04
  √ Z flag is set when value == 0 (1 ms)
  √ Z flag is not set when value > 0 (13 ms)
  √ flags set by on/off commands can be set on with true
  √ flags set by on/off commands can be set off with false
  √ C flag is set for $F0 + $20 or for $10 - $20 (1 ms)
  √ C flag is set for $10 - $20
  √ C flag is not set for $F0 + $04
  √ C flag is not set for $F4 - $04 (1 ms)
  √ NOP has no effect to the CPU (1 ms)
  √ CLC clears the Carry flag (1 ms)
  √ CLD clears the Decimal Mode flag
  √ CLI clears the Interrupt disable flag (1 ms)
  √ CLV clears the overflow flag
  √ DEX decrements the X register setting Zero flag when decremented from $01 (1 ms)
  √ DEY decrements the Y register setting Negative flag when decremented from $00
  √ INX increments the X register setting Zero flag when incremented from $FF
  √ INY increments the Y register setting Negative flag when incremented from $127 (1 ms)
  √ PHA pushes $69 from the accumulator to the stack and decrements the stack pointer
  √ PHP pushes the Processor status the stack and decrements the stack pointer (1 ms)
  √ PLA pulls $69 from the stack, sets accumulator and decrements the stack pointer
  √ PLP pulls Processor status from the stack, sets the P Register and decrements the stack pointer (1 ms)
  √ ADC #$68 Adds to accumulator (#$01) to make 0x69 adding the carry, unsetting C flag once consumed
  √ ADC #$68 Adds to accumulator (#$FE) to make 0x69 adding the carry, resetting C flag (1 ms)
  √ ADC $80 gets #$68 from ZP$80 and adds to accumulator (#$01) to make 0x69
  √ ADC $80,X gets #$68 from $82 and adds to accumulator (#$01) to make 0x69 if X == $02
  √ ADC $2200 gets #$69 from $2200 and adds to accumulator (#$01) to make 0x69 (1 ms)
  √ ADC $2200,X gets #$69 from $220F and adds to accumulator (#$01) to make 0x69 if X == #$0F
  √ ADC $2200,Y gets #$69 from $220F and adds to accumulator (#$01) to make 0x69 if Y == #$0F (1 ms)
  √ ADC ($20,X) gets 0x68 from $3074 and adds to accumulator (#$01) to make 0x69 if X == 0x04
  √ ADC ($0),Y gets 0x68 from $0310 and adds to accumulator (#$01) to make 0x69 if Y == 0x90
  √ AND #$69 performs logical AND on accumulator (0xE9) to make 0x69 (1 ms)
  √ AND $80 gets #$69 from ZP$80 and performs a logical AND on accumulator (0xE9) to make 0x69
  √ AND $80,X gets #$68 from $82 performs a logical AND on accumulator (0xE9) to make 0x69 if X == $02 (1 ms)
  √ AND $2200 gets #$69 from $2200 and performs logical AND on accumulator (0xE9) to make 0x69
  √ AND $2200,X gets #$69 from $220F and performs logical AND on accumulator (0xE9) to make 0x69 if X == #$0F
  √ AND $2200,Y gets #$69 from $220F and performs logical AND on accumulator (0xE9) to make 0x69 if Y == #$0F (1 ms)
  √ AND ($20,X) gets 0x69 from $3074 and performs a logical AND on accumulator (0xE9) to make 0x69 if X == 0x04
  √ AND ($0),Y gets 0x69 from $0310 and performs a logical AND on accumulator (0xE9) to make 0x69 if Y == 0x90
  √ ASL A shifts accumulator (0x30) left 1 bit doubling the value to 0x60, C Flag not set (1 ms)
  √ ASL A shifts accumulator (0x128) left 1 bit setting the C flag and resulting in 0x00
  √ ASL $80 shifts ZP$80 (0x30) left 1 bit doubling the value to 0x60 (1 ms)
  √ ASL $80,X shifts ZP$82 (0x30) left 1 bit doubling the value to 0x60, if X == 02
  √ ASL $2200 shifts $2200 (0x30) left 1 bit doubling the value to 0x60 (1 ms)
  √ ASL $2200,X shifts $220F (0x30) left 1 bit doubling the value to 0x60 if X == 0F
  √ BCC skips setting A to 0 because Carry is clear, but X still set to 0x69
  √ BCC sets A to 0 because Carry is not clear, but X still set to 0x69 (1 ms)
  √ BCS skips setting A to 0 because Carry is set, but X still set to 0x69
  √ BCS sets A to 0 because Carry is clear, but X still set to 0x69 (1 ms)
  √ BEQ skips setting A to 0 because Zero flag is set, but X still set to 0x69
  √ BEQ sets A to 0 because Zero flag clear, but X still set to 0x69
  √ BMI skips setting A to 0 because Negative flag is set, but X still set to 0x69 (1 ms)
  √ BMI sets A to 0 because Negative flag clear, but X still set to 0x69
  √ BNE skips setting A to 0 because Zero flag is clear, but X still set to 0x69 (1 ms)
  √ BNE sets A to 0 because Zero flag set, but X still set to 0x69
  √ BPL skips setting A to 0 because Negative flag is clear, but X still set to 0x69 (1 ms)
  √ BPL sets A to 0 because Negative flag is set, but X still set to 0x69
  √ BVC skips setting A to 0 because Overflow flag clear, but X still set to 0x69
  √ BVC sets A to 0 because Overflow flag is set, but X still set to 0x69 (1 ms)
  √ BVS skips setting A to 0 because Overflow flag is set, but X still set to 0x69
  √ BVS sets A to 0 because Overflow flag is clear, but X still set to 0x69 (1 ms)
  √ BIT $80 ANDs A (0x1E) with ZP$80 (0x3E), (both remain unchanged) Zero flag is set, but NV flags are not
  √ BIT $80 ANDs A (0x1E) with ZP$80 (0x5E), (both remain unchanged) Z and V flags are set, N flag is not (1 ms)
  √ BIT $80 ANDs A (0x1E) with ZP$80 (0x9E), (both remain unchanged) Z and N flags are set, V flag is not
  √ BIT $80 ANDs A (0x1E) with $2200 (0xDE), (both remain unchanged) ZNV flags are set (1 ms)
  √ CMP #$69 compares accumulator (0x69) with hex 0x69 setting the Z,C flag, but not N flag
  √ CPX #$69 compares X Register (0x69) with hex 0x6F setting the N flag, but not Z,C flag (1 ms)
  √ CMP #$69 compares Y Register (0x6F) with hex 0x69 setting the C flag, but not Z,N flag
  √ CMP $80 compares accumulator (0x69) with hex ZP$80 (0x69) setting the Z,C flag, but not N flag (1 ms)
  √ CPX $80 compares X Register (0x69) with hex ZP$80 (0x69) setting the Z,C flag, but not N flag
  √ CPX $80 compares Y Register (0x69) with hex ZP$80 (0x69) setting the Z,C flag, but not N flag (1 ms)
  √ CMP $80,X compares X Register (0x69) with hex ZP$82 (0x69) setting the Z,C flag, but not N flag if X==0x02
  √ CMP $2200 compares accumulator (0x69) with hex $2200 (0x69) setting the Z,C flag, but not N flag
  √ CPX $2200 compares X Register (0x69) with hex $2200 (0x69) setting the Z,C flag, but not N flag (1 ms)
  √ CPX $2200 compares Y Register (0x69) with hex $2200 (0x69) setting the Z,C flag, but not N flag
  √ CMP $2200,X compares accumulator (0x69) with hex $2202 (0x69) setting the Z,C flag, but not N flag if X==0x02 (1 ms)
  √ CMP $2200,Y compares accumulator (0x69) with hex $2202 (0x69) setting the Z,C flag, but not N flag if Y==0x02
  √ CMP ($20,X) gets 0x69 from $3074 and compares to accumulator (0x69) setting Z,C Flag but not N flag, if X == 0x04 (1 ms)
  √ CMP ($0),Y gets 0x69 from $0310 and compares to on accumulator (0x69) setting Z,C Flag but not N flag, if Y == 0x90
  √ LDA #$69 Loads 0x69 into A Register
  √ LDA $80 Loads 0x69 from $80 into A Register (1 ms)
  √ LDA $80,X Loads 0x69 from $7f into A Register if X register is $FF
  √ LDA $2200 Loads 0x69 from $2200 into A Register (1 ms)
  √ LDA $2200,X Loads 0x69 from $220F into A Register if X register is $0F
  √ LDA $2200,Y Loads 0x69 from $220F into A Register if Y register is $0F
  √ LDA ($20,X) Loads 0x69 from $3074 into A Register if X register is $04 (1 ms)
  √ LDA ($0),Y Loads 0x69 from $0310 into A Register if Y register is $90
  √ LDA ($0),Y does not carry when low order calculation is < 0xFF
  √ LDX #$69 Loads 0x69 into X Register (1 ms)
  √ LDX $80 Loads 0x69 from $80 into X Register (1 ms)
  √ LDX $80,Y Loads 0x69 from $7f into X Register if Y register is $FF
  √ LDX $2200 Loads 0x69 from $2200 into X Register
  √ LDX $2200,Y Loads 0x69 from $220F into X Register if Y register is $0F (1 ms)
  √ LDY #$69 Loads 0x69 into Y Register
  √ LDY $80 Loads 0x69 from $80 into X Register
  √ LDY $80,X Loads 0x69 from $7f into X Register if X register is $FF (1 ms)
  √ LDY $2200 Loads 0x69 from $2200 into Y Register
  √ LDY $2200,X Loads 0x69 from $220F into Y Register if X register is $0F
  √ STA $22 stores 0x69 from Register A into Zero Page memory @ $22 (1 ms)
  √ STA $80,X stores 0x69 from Register A into Zero Page memory @ $7F if X register is $FF
  √ STA $2200 stores 0x69 from Register A into memory @ $2200
  √ STA $2200,X stores 0x69 from Register A into memory @ $220F is X register is $0F (1 ms)
  √ STA ($20,X) stores 0x69 from Register A into memory @ $3074 if X register is $04
  √ STA ($0),Y stores 0x69 from Register A into memory @ $0310 if Y register is $90 (1 ms)
  √ STA ($0),Y does not carry when low order calculation is < 0xFF
  √ STX $22 stores 0x69 from Register X into Zero Page memory @ $22
  √ STX $80,Y stores 0x69 from Register X into Zero Page memory @ $7F if Y register is $FF (1 ms)
  √ STX $2200 stores 0x69 from Register X into memory @ $2200
  √ STY $22 stores 0x69 from Register Y into Zero Page memory @ $22
  √ STY $80,X stores 0x69 from Register Y into Zero Page memory @ $7F if X register is $FF
  √ STY $2200 stores 0x69 from Register Y into memory @ $2200
  √ TAX transfers 0x80 from Register A to Register X setting N flag
  √ TAY transfers 0x00 from Register A to Register Y setting Z flag (1 ms)
  √ TSX transfers stack pointer to Register X
  √ TXA transfers 0x00 from Register X to Register A
  √ TXS transfers Register X to stack pointer (1 ms)
  √ TYA transfers 0x69 from Register Y to Register A

Test Suites: 1 passed, 1 total
Tests:       126 passed, 126 total
Snapshots:   0 total
Time:        2.067 s
Ran all test suites.
